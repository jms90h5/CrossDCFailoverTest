Design Plan: Automated Cross-DC Failover Testing Framework for Teracloud Streams
Version: 1.0
Date: October 26, 2023
Status: Design Final

1. INTRODUCTION
This document outlines the design for an automated cross-Data Center (DC) failover testing framework for Teracloud Streams. The framework will provide a robust solution for validating resilience and recovery capabilities of Teracloud Streams applications in cross-DC configurations, leveraging the REST API, Data Exchange features, and Cross-DC Failover Toolkit in version 7.2.0.

The framework automates the entire test lifecycle: setup, execution, monitoring, validation, and reporting, using Python with standard libraries for Teracloud Streams interaction and failure simulation.

2. GOALS AND SCOPE

2.1. Goals
• Comprehensive Validation: Test end-to-end cross-DC failover mechanisms
• Automation: Minimize manual intervention throughout the test lifecycle
• Repeatability: Enable consistent execution for regression testing
• Realism: Simulate various failure scenarios (network issues, service outages, DC failures)
• Measurability: Quantify key metrics (RTO and RPO)
• Extensibility: Accommodate new test scenarios and features

2.2. Scope
In Scope:
• Test environment automation with Cross-DC Failover Toolkit
• REST Management API integration for application lifecycle
• Data Exchange REST API for test data injection/validation
• Cross-DC Failover Toolkit programmatic control
• Failure simulation (API-driven, network, process/node)
• Monitoring via API and Prometheus/JMX integration
• Data integrity validation and reporting

Out of Scope:
• Performance testing beyond failover validation
• Infrastructure resilience testing (storage, network hardware)
• Custom Streams operators beyond test requirements
• Security vulnerability testing

3. FRAMEWORK ARCHITECTURE

3.1. High-Level Architecture
The framework uses a modular architecture with these key components:

• Test Orchestrator: Python application managing test execution
  - Parses configurations
  - Manages Streams application lifecycle
  - Coordinates data injection/retrieval
  - Initiates failure simulations
  - Monitors system state
  - Analyzes results and generates reports

• Test Configuration Module: Defines test scenarios, parameters, and criteria in YAML/JSON

• Teracloud Streams Interaction Module: Handles API communication
  - REST Management API interactions
  - Data Exchange API operations
  - Cross-DC Failover Toolkit integration

• Failure Injection Module: Induces failures via
  - API-based injectors
  - Network failure injectors (tcconfig, python-iptables)
  - Process/Node failure injectors (paramiko)

• Monitoring & Validation Module: Collects metrics and validates application state

• Reporting Module: Generates test summaries and pass/fail status

• (Optional) Test Agents: Lightweight scripts for localized failure injection

3.2. Core Framework Components and Responsibilities
• Test Orchestrator: Main control program (Python)
• Configuration Parser: Reads test scenario definitions (PyYAML)
• Streams API Client: Manages HTTP communication (requests)
• Failure Injection Engine: Orchestrates various failure types
• Test Agent: Executes low-level commands on target nodes
• Monitoring Client: Gathers metrics from APIs/Prometheus/JMX
• Validation Engine: Compares outcomes against expected results
• Reporting Generator: Produces test reports in standard formats
• Test Data Generator: Creates deterministic test data

4. INTERACTION WITH TERACLOUD STREAMS INTERFACES

4.1. REST Management API
The framework uses Python requests library to interact with the enhanced REST Management API in Streams 7.2 for:
• Application deployment (SAB submission)
• Job management (start, stop, cancel)
• Status monitoring of instances, jobs, and PEs
• Metrics retrieval from jobs and instances
• Log collection

4.2. Data Exchange Feature
The Data Exchange service provides REST endpoints for:
• Pre-failover state seeding: Injecting test data into the primary DC
• Post-failover verification: Retrieving data after failover to validate integrity
• Requires appropriate endpoint operators in the SPL application

4.3. Cross-DC Failover Toolkit
The framework tests applications using the com.teracloud.streams.crossdcfailover toolkit, which provides application-level failover. Integration includes:
• Configuration via REST Management API
• Monitoring toolkit/application failover state
• Conditional triggering of failover/failback (if supported)

5. TECHNOLOGY CHOICES AND DEPLOYMENT STRATEGY

5.1. Justification for Python
Python offers:
• Rich ecosystem with mature libraries for HTTP/SSH/network manipulation
• Ease of development and maintenance for complex frameworks
• Cross-platform compatibility for orchestration
• Strong community support

Key libraries include:
• requests: HTTP API communication
• paramiko: SSH remote command execution
• tcconfig: Network condition simulation
• pytest: Test organization and execution
• prometheus-api-client: Metrics querying
• chaostoolkit: Potential future integration

5.2. Deployment Implications
• Python 3.9+ required on orchestrator and agents
• Dependencies managed via requirements.txt and virtual environments
• Agent deployment for fine-grained failure injection
• Network access between orchestrator and all Teracloud endpoints
• Appropriate privileges for network manipulation operations

6. FAILURE SIMULATION STRATEGY

6.1. API-Driven Failure Injection
• Stopping specific jobs/PEs in the primary DC
• Terminating entire Streams instances
• Testing Cross-DC Failover Toolkit response to administrative interventions

6.2. Network Failure Simulation
Using Linux tc (via tcconfig) and iptables:
• Complete network partitions between DCs
• Bandwidth constraints simulating link congestion
• Latency injection mimicking geographic distance
• Packet loss/corruption simulating degraded connections
• Asymmetric network conditions testing one-way communication issues

6.3. Process-Level Failures
Using SSH via paramiko:
• Terminating specific PE processes
• Resource exhaustion simulation (CPU/memory stress)
• Storage disruption (I/O errors, filesystem full)

7. TEST DATA STRATEGY

7.1. Deterministic Test Data Generation
• Unique identifiers for tracking through the system
• Timestamps for temporal ordering validation
• Clear payload patterns for transformation verification
• Volume control for testing at various scales

7.2. Data Flow for Validation
• Injection via Data Exchange API before failover
• Processing by the Streams application across failover
• Retrieval via Data Exchange API after failover
• Comparison against expected patterns, ordering, and transformations

7.3. Measuring RPO and RTO
• RPO: Data consistency check identifying any lost records
• RTO: Timing from failure detection to service restoration
• Advanced metrics like processing throughput recovery time

8. KEY ASSUMPTIONS

• Teracloud Streams 7.2.0+ with enhanced REST Management API
• Data Exchange service supports RESTful JSON data injection/retrieval
• Cross-DC Failover Toolkit provides application-level failover capabilities
• Common authentication mechanism for APIs (bearer tokens or API keys)
• Toolkit exposes status information via API or metrics

9. POINTS REQUIRING CONFIRMATION FROM TERACLOUD SMEs

• Detailed REST Management API documentation
• Data Exchange Service API specifications
• Cross-DC Failover Toolkit documentation and configuration
• API rate limits and quotas
• Programmatic failover control capabilities
• Toolkit's failure detection specifications
• State replication details and guarantees
• Recommended monitoring metrics
• Security context and permission requirements

10. CONCLUSION
This design outlines a Python-based automated testing framework for Teracloud Streams cross-DC failover validation. The framework leverages Teracloud Streams 7.2.0 features to provide comprehensive testing capabilities with a modular architecture supporting a variety of failure scenarios.

The design emphasizes accurate measurement of RPO and RTO metrics and clearly identifies assumptions and areas requiring SME input. This framework will significantly enhance confidence in disaster recovery capabilities for Teracloud Streams deployments.